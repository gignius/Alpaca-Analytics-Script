#!/usr/bin/env python3
"""
Setup script for Alpaca Trading Analytics
Helps users configure the application with their API keys
"""

import os
import sys
from pathlib import Path

def setup_config():
    """Interactive setup for API configuration."""
    print("🚀 Alpaca Trading Analytics Setup")
    print("=" * 50)
    
    # Check if config already exists
    config_file = Path("config.py")
    if config_file.exists():
        response = input("⚠️  config.py already exists. Overwrite? (y/n): ")
        if response.lower() not in ['y', 'yes']:
            print("Setup cancelled.")
            return
    
    print("\n🔑 API Key Configuration")
    print("Get your API keys from: https://app.alpaca.markets/")
    print("📝 Note: These keys will be stored in config.py")
    
    # Get API keys
    api_key = input("\n📋 Enter your Alpaca API Key: ").strip()
    secret_key = input("🔐 Enter your Alpaca Secret Key: ").strip()
    
    if not api_key or not secret_key:
        print("❌ Error: Both API key and secret key are required.")
        return
    
    # Choose environment
    print("\n🎯 Trading Environment:")
    print("1. Paper Trading (recommended for testing)")
    print("2. Live Trading (real money)")
    
    while True:
        choice = input("Select environment (1 or 2): ").strip()
        if choice in ['1', '2']:
            use_paper = choice == '1'
            break
        print("Please enter 1 or 2")
    
    # Create config file
    config_content = f'''"""
Alpaca Trading Analytics Configuration
Generated by setup script
"""

# Alpaca API Configuration
ALPACA_API_KEY = "{api_key}"
ALPACA_SECRET_KEY = "{secret_key}"

# Trading Environment
USE_PAPER_TRADING = {use_paper}

# Optional: Additional settings
DEFAULT_ANALYSIS_PERIOD = "1M"
MAX_ORDERS_TO_DISPLAY = 50
MAX_RETRIES = 3
RETRY_DELAY = 1.0

# Output formatting
CURRENCY_SYMBOL = "$"
DATE_FORMAT = "%Y-%m-%d %H:%M:%S UTC"
PRECISION_DECIMAL_PLACES = 2
'''
    
    try:
        with open(config_file, 'w') as f:
            f.write(config_content)
        
        print(f"\n✅ Configuration saved to {config_file}")
        print(f"🎯 Environment: {'Paper Trading' if use_paper else 'Live Trading'}")
        
        # Update .gitignore to include config.py
        gitignore_file = Path(".gitignore")
        if gitignore_file.exists():
            with open(gitignore_file, 'r') as f:
                content = f.read()
            
            if "config.py" not in content:
                with open(gitignore_file, 'a') as f:
                    f.write("\n# Local configuration\nconfig.py\n")
                print("📝 Added config.py to .gitignore for security")
        
        print("\n🚀 Setup complete! You can now run:")
        print("   python alpaca.py")
        
    except Exception as e:
        print(f"❌ Error creating config file: {e}")

def check_dependencies():
    """Check if required dependencies are installed."""
    try:
        import requests
        print("✅ Dependencies satisfied")
        return True
    except ImportError:
        print("❌ Missing dependencies. Please run:")
        print("   pip install -r requirements.txt")
        return False

def main():
    """Main setup function."""
    print("🔍 Checking dependencies...")
    
    if not check_dependencies():
        sys.exit(1)
    
    setup_config()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n👋 Setup cancelled by user")
    except Exception as e:
        print(f"\n❌ Setup failed: {e}")
        sys.exit(1)
